// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "example.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Container } from "@gf-core/core/container";

/**
 * @generated from protobuf message PlayerInfo
 */
export interface PlayerInfo {
    /**
     * @generated from protobuf field: string name = 1
     */
    name: string;
    /**
     * @generated from protobuf field: int32 level = 2
     */
    level: number;
    /**
     * @generated from protobuf field: repeated string items = 3
     */
    items: string[];
}
/**
 * @generated from protobuf message GameSession
 */
export interface GameSession {
    /**
     * @generated from protobuf field: string session_id = 1
     */
    sessionId: string;
    /**
     * @generated from protobuf field: PlayerInfo player = 2
     */
    player?: PlayerInfo;
    /**
     * @generated from protobuf field: int64 timestamp = 3
     */
    timestamp: bigint;
}
// @generated message type with reflection information, may provide speed optimized methods
class PlayerInfo$Type extends MessageType<PlayerInfo> implements IGameFramework.ISerializer {
    constructor() {
        super("PlayerInfo", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "level", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "items", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerInfo>): PlayerInfo {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.level = 0;
        message.items = [];
        if (value !== undefined)
            reflectionMergePartial<PlayerInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerInfo): PlayerInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* int32 level */ 2:
                    message.level = reader.int32();
                    break;
                case /* repeated string items */ 3:
                    message.items.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* int32 level = 2; */
        if (message.level !== 0)
            writer.tag(2, WireType.Varint).int32(message.level);
        /* repeated string items = 3; */
        for (let i = 0; i < message.items.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.items[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }

    public get protoId(): number {
        return 346867040;
    }
}
/**
 * @generated MessageType for protobuf message PlayerInfo
 */
export const PlayerInfo = new PlayerInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GameSession$Type extends MessageType<GameSession> implements IGameFramework.ISerializer {
    constructor() {
        super("GameSession", [
            { no: 1, name: "session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "player", kind: "message", T: () => PlayerInfo },
            { no: 3, name: "timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GameSession>): GameSession {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sessionId = "";
        message.timestamp = 0n;
        if (value !== undefined)
            reflectionMergePartial<GameSession>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameSession): GameSession {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string session_id */ 1:
                    message.sessionId = reader.string();
                    break;
                case /* PlayerInfo player */ 2:
                    message.player = PlayerInfo.internalBinaryRead(reader, reader.uint32(), options, message.player);
                    break;
                case /* int64 timestamp */ 3:
                    message.timestamp = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameSession, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string session_id = 1; */
        if (message.sessionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sessionId);
        /* PlayerInfo player = 2; */
        if (message.player)
            PlayerInfo.internalBinaryWrite(message.player, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int64 timestamp = 3; */
        if (message.timestamp !== 0n)
            writer.tag(3, WireType.Varint).int64(message.timestamp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }

    public get protoId(): number {
        return 493038036;
    }
}
/**
 * @generated MessageType for protobuf message GameSession
 */
export const GameSession = new GameSession$Type();

const serializable = Container.getInterface("IGameFramework.ISerializable");
if (serializable) {
    serializable!.registerInst(PlayerInfo);
    serializable!.registerInst(GameSession);
} else {
    console.error("未找到 IGameFramework.ISerializable 接口");
}
